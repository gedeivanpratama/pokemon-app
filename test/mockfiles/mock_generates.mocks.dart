// Mocks generated by Mockito 5.4.0 from annotations
// in flutter_technical_test/test/mockfiles/mock_generates.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:flutter_technical_test/core/utility/errors.dart' as _i7;
import 'package:flutter_technical_test/core/utility/metwork_info.dart' as _i9;
import 'package:flutter_technical_test/features/home/data/datasources/pokemon_datasorce.dart'
    as _i4;
import 'package:flutter_technical_test/features/home/data/models/pokemons_model.dart'
    as _i2;
import 'package:flutter_technical_test/features/home/domain/entities/pokemons.dart'
    as _i8;
import 'package:flutter_technical_test/features/home/domain/repositories/pokemon_repository.dart'
    as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePokemonsModel_0 extends _i1.SmartFake implements _i2.PokemonsModel {
  _FakePokemonsModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PokemonDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockPokemonDataSource extends _i1.Mock implements _i4.PokemonDataSource {
  MockPokemonDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.PokemonsModel> getPokemons() => (super.noSuchMethod(
        Invocation.method(
          #getPokemons,
          [],
        ),
        returnValue: _i5.Future<_i2.PokemonsModel>.value(_FakePokemonsModel_0(
          this,
          Invocation.method(
            #getPokemons,
            [],
          ),
        )),
      ) as _i5.Future<_i2.PokemonsModel>);
}

/// A class which mocks [PokemonRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPokemonRepository extends _i1.Mock implements _i6.PokemonRepository {
  MockPokemonRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.Either<_i7.Failure, _i8.Pokemons>> getPokemons() =>
      (super.noSuchMethod(
        Invocation.method(
          #getPokemons,
          [],
        ),
        returnValue: _i5.Future<_i3.Either<_i7.Failure, _i8.Pokemons>>.value(
            _FakeEither_1<_i7.Failure, _i8.Pokemons>(
          this,
          Invocation.method(
            #getPokemons,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i7.Failure, _i8.Pokemons>>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i9.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
}
